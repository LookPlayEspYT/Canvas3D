/*
	Screen
*/
class screen{
	constructor(_ID_Name_){ /* ID of Canvas */
		this.parent=document.getElementById(_ID_Name_);
		this.ID_Name_Canvas=_ID_Name_+"Canvas";
		this.ID_Name_Alert=_ID_Name_+"Alert";
		this.Txt='<canvas id="'+this.ID_Name_Canvas+'"></canvas><div id="'+this.ID_Name_Alert+'"></div>';
		this.background="#FFF";
		this.extra={
			Inter:0
		};

		this.point={
			x:0,
			y:0
		};

		this.parent.innerHTML=this.Txt;

		this.Canvas;
		this.Alert;
		this.gtx;
	}
	setup(){
		this.Canvas=document.getElementById(this.ID_Name_Canvas);
		this.Alert=document.getElementById(this.ID_Name_Alert);
		this.gtx=this.Canvas.getContext("2d");

		this.Alert.style.background="#555";
		this.Alert.style.width="100px";
		this.Alert.style.color="#fff";
		this.Alert.style.padding="0px 100px 0px 100px";
		this.Alert.style.position="fixed";
		this.Alert.style.top="10px";
		this.Alert.style.left=(window.innerWidth/2)-150+"px";
	}
	clear(){
		this.gtx.fillStyle="#FFF";
		this.gtx.fillRect(0,0,300,300);
	}

	border(_Border_Style_){
		this.Canvas.style.border=_Border_Style_;
	}
	size(_Width_,_Height_){
		this.Canvas.style.width=_Width_;
		this.Canvas.style.height=_Height_;
	}
	updtPoint(_Point_OBJ_){
		this.point.x=_Point_OBJ_.x;
		this.point.y=_Point_OBJ_.y;
	}
	updtCube(_Cube_OBJ_){
		_Cube_OBJ_.update(this, this.point);
	}
	/*
		Gtx Function
	*/
	beginPath(){
		this.gtx.beginPath();
	}
	closePath(){
		this.gtx.closePath();
	}
	moveTo(_X_,_Y_){
		this.gtx.moveTo(_X_,_Y_);
	}
	lineTo(_x_,_y_){
		this.gtx.lineTo(_x_,_y_);
	}
	fill(){
		this.gtx.fill();
	}
	stroke(){
		this.gtx.stroke();
	}
	styleF(_Color_){
		this.gtx.fillStyle=_Color_;
	}
	styleS(_Color_){
		this.gtx.strokeStyle=_Color_;
	}
	/*
		Alert
	*/
	error(_Error_Tittle_,_Error_Text_){
		this.extra.Inter+=1;
		this.Alert.style.visibility="visible";
		this.Alert.innerHTML="<h1>"+_Error_Tittle_+"</h1><br><h3>"+_Error_Text_+"</h3>";
		setTimeout(() => {
			this.extra.Inter-=1;
			if(this.extra.Inter==0){
				this.Alert.style.visibility="hidden";
			};
		},505);
	}
	/*
		Show & Hide
	*/
	show(){
		this.parent.style.visibility="visible";
	}
	hidden(){
		this.parent.style.visibility="hidden";
	}
}
/*
	fugue point
*/
class fuguePoint{
	constructor(_x_,_y_){
		this.x=_x_;
		this.y=_y_;
	}
}

/*
	Cube
*/
class cube{
	constructor(_X_, _Y_, _Size_, _Screen_OBJ_){
		this.x=[_X_, _X_, _X_+_Size_, _X_+_Size_];
		this.y=[_Y_, _Y_+_Size_, _Y_+_Size_, _Y_];
		this.size=_Size_;
		this.colorStroke="#000";
		this.colorFill="#000";
		this.colors=[];
		this.lineX=[0];
		this.lineY=[0];
		this.depht=0.1;
		this.sm=1; // Size Mininum

		this.on3d=true;
	}
	update(_Screen_OBJ_, _Point_OBJ_){
		this.updtLines(_Point_OBJ_);
		this.firstLayer(_Screen_OBJ_);
		this.topLayer(_Screen_OBJ_);
	}
	firstLayer(_Screen_OBJ_){
		_Screen_OBJ_.styleF(this.colorFill);
		_Screen_OBJ_.styleS(this.colorStroke);
		_Screen_OBJ_.beginPath();
		_Screen_OBJ_.moveTo(this.x[0],this.y[0]);
		for(var i=1; i<=3; i++){
			_Screen_OBJ_.lineTo(this.x[i],this.y[i]);
		}
		_Screen_OBJ_.lineTo(this.x[0],this.y[0]);
		_Screen_OBJ_.closePath();
		_Screen_OBJ_.fill();
		_Screen_OBJ_.stroke();
	}
	topLayer(_Screen_OBJ_){
		_Screen_OBJ_.styleF(this.colorFill);
		_Screen_OBJ_.styleS(this.colorStroke);

		_Screen_OBJ_.beginPath();
		_Screen_OBJ_.moveTo(this.lineX[0],this.lineY[0]);
		_Screen_OBJ_.lineTo(this.x[0],this.y[0]);
		_Screen_OBJ_.lineTo(this.x[1],this.y[1]);
		_Screen_OBJ_.lineTo(this.lineX[1],this.lineY[1]);
		_Screen_OBJ_.lineTo(this.lineX[0],this.lineY[0]);

		_Screen_OBJ_.closePath();
		_Screen_OBJ_.fill();
		_Screen_OBJ_.stroke();
	}
	updtLines(_Point_OBJ_){
		this.lineX[0]=this.x[0]-((this.x[0]-_Point_OBJ_.x)*this.depht+this.sm);
		this.lineY[0]=this.y[0]-((this.y[0]-_Point_OBJ_.y)*this.depht+this.sm);

		this.lineX[1]=this.x[1]-((this.x[1]-_Point_OBJ_.x)*this.depht+this.sm);
		this.lineY[1]=this.y[1]-((this.y[1]-_Point_OBJ_.y)*this.depht-this.sm);

		this.lineX[2]=this.x[2]-((this.x[2]-_Point_OBJ_.x)*this.depht-this.sm);
		this.lineY[2]=this.y[2]-((this.y[2]-_Point_OBJ_.y)*this.depht-this.sm);

		this.lineX[3]=this.x[3]-((this.x[3]-_Point_OBJ_.x)*this.depht-this.sm);
		this.lineY[3]=this.y[3]-((this.y[3]-_Point_OBJ_.y)*this.depht+this.sm);
	}
	move(_X_,_Y_,_Size_){
		this.x=[_X_, _X_, _X_+_Size_, _X_+_Size_];
		this.y=[_Y_, _Y_+_Size_, _Y_+_Size_, _Y_];
		this.size=_Size_;
	}
}

function stringToInt(_String_){
	return parseInt(_String_);
}